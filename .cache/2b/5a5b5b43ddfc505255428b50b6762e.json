{"id":"../../node_modules/@iobroker/adapter-react/i18n.js","dependencies":[{"name":"C:\\Projekte\\ioBroker.aio\\node_modules\\@iobroker\\adapter-react\\i18n.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Projekte\\ioBroker.aio\\package.json","includedInParent":true,"mtime":1636145519074},{"name":"C:\\Projekte\\ioBroker.aio\\.babelrc","includedInParent":true,"mtime":1635630978817},{"name":"C:\\Projekte\\ioBroker.aio\\node_modules\\@iobroker\\adapter-react\\package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/***\n * Copyright 2018-2019 bluefox <dogafox@gmail.com>\n *\n * MIT License\n *\n ***/\n\n/**\n * Translation string management.\n */\nvar I18n = /*#__PURE__*/function () {\n  function I18n() {\n    _classCallCheck(this, I18n);\n  }\n\n  _createClass(I18n, null, [{\n    key: \"setLanguage\",\n    value:\n    /**\n     * List of all languages with their translations.\n     * @type {{ [lang in ioBroker.Languages]?: Record<string, string>; }}\n     */\n\n    /**\n     * The currently displayed language.\n     * @type {ioBroker.Languages}\n     */\n\n    /**\n     * Set the language to display.\n     * @param {ioBroker.Languages} lang\n     */\n    function setLanguage(lang) {\n      if (lang) {\n        I18n.lang = lang;\n      }\n    }\n    /**\n     * Add translations\n     * User can provide two types of structures:\n     * - {\"word1\": \"translated word1\", \"word2\": \"translated word2\"}, but in this case the lang must be provided\n     * - {\"word1\": {\"en\": \"translated en word1\", \"de\": \"translated de word1\"}, \"word2\": {\"en\": \"translated en word2\", \"de\": \"translated de word2\"}}, but no lang must be provided\n     * @param {object} words additional words for specific language\n     * @param {ioBroker.Languages} lang\n     */\n\n  }, {\n    key: \"extendTranslations\",\n    value: function extendTranslations(words, lang) {\n      try {\n        if (!lang) {\n          Object.keys(words).forEach(function (word) {\n            Object.keys(words[word]).forEach(function (lang) {\n              if (!I18n.translations[lang]) {\n                console.warn(\"Used unknown language: \".concat(lang));\n              }\n\n              if (!I18n.translations[lang][word]) {\n                I18n.translations[lang][word] = words[word][lang];\n              } else if (I18n.translations[lang][word] !== words[word][lang]) {\n                console.warn(\"Translation for word \\\"\".concat(word, \"\\\" in \\\"\").concat(lang, \"\\\" was ignored: existing = \\\"\").concat(I18n.translations[lang][word], \"\\\", new = \").concat(words[word][lang]));\n              }\n            });\n          });\n        } else {\n          if (!I18n.translations[lang]) {\n            console.warn(\"Used unknown language: \".concat(lang));\n          }\n\n          I18n.translations[lang] = I18n.translations[lang] || {};\n          Object.keys(words).forEach(function (word) {\n            if (!I18n.translations[lang][word]) {\n              I18n.translations[lang][word] = words[word];\n            } else if (I18n.translations[lang][word] !== words[word]) {\n              console.warn(\"Translation for word \\\"\".concat(word, \"\\\" in \\\"\").concat(lang, \"\\\" was ignored: existing = \\\"\").concat(I18n.translations[lang][word], \"\\\", new = \").concat(words[word]));\n            }\n          });\n        }\n      } catch (e) {\n        console.error(\"Cannot apply translations: \".concat(e));\n      }\n    }\n    /**\n     * Sets all translations (in all languages).\n     * @param {{ [lang in ioBroker.Languages]?: Record<string, string>; }} translations\n     */\n\n  }, {\n    key: \"setTranslations\",\n    value: function setTranslations(translations) {\n      if (translations) {\n        I18n.translations = translations;\n      }\n    }\n    /**\n     * Get the currently chosen language.\n     * @returns {ioBroker.Languages} The current language.\n     */\n\n  }, {\n    key: \"getLanguage\",\n    value: function getLanguage() {\n      return I18n.lang;\n    }\n    /**\n     * Translate the given string to the selected language.\n     * @param {string} word The (key) word to look up the string.\n     * @param {string[]} args Optional arguments which will replace the first (second, third, ...) occurence of %s\n     */\n\n  }, {\n    key: \"t\",\n    value: function t(word) {\n      var translation = I18n.translations[I18n.lang];\n\n      if (translation) {\n        var w = translation[word];\n\n        if (w) {\n          word = w;\n        } else {\n          console.log(\"Translate: \".concat(word));\n        }\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      for (var _i = 0, _args = args; _i < _args.length; _i++) {\n        var arg = _args[_i];\n        word = word.replace('%s', arg);\n      }\n\n      return word;\n    }\n  }]);\n\n  return I18n;\n}();\n/*I18n.translations = {\n    'en': require('./i18n/en'),\n    'ru': require('./i18n/ru'),\n    'de': require('./i18n/de'),\n};\nI18n.fallbacks = true;\nI18n.t = function () {};*/\n\n\n_defineProperty(I18n, \"translations\", {});\n\n_defineProperty(I18n, \"lang\", window.sysLang || 'en');\n\nvar _default = I18n;\nexports[\"default\"] = _default;\n\n"},"sourceMaps":{"js":{"version":3,"sources":["i18n.js"],"names":["I18n","lang","words","Object","keys","forEach","word","translations","console","warn","e","error","translation","w","log","args","arg","replace","window","sysLang"],"mappings":"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","sourcesContent":["/***\n * Copyright 2018-2019 bluefox <dogafox@gmail.com>\n *\n * MIT License\n *\n ***/\n\n /**\n  * Translation string management.\n  */\nclass I18n {\n    /**\n     * List of all languages with their translations.\n     * @type {{ [lang in ioBroker.Languages]?: Record<string, string>; }}\n     */\n    static translations = {};\n\n    /**\n     * The currently displayed language.\n     * @type {ioBroker.Languages}\n     */\n    static lang = window.sysLang || 'en';\n\n    /**\n     * Set the language to display.\n     * @param {ioBroker.Languages} lang\n     */\n    static setLanguage(lang) {\n        if (lang) {\n            I18n.lang = lang;\n        }\n    }\n\n     /**\n      * Add translations\n      * User can provide two types of structures:\n      * - {\"word1\": \"translated word1\", \"word2\": \"translated word2\"}, but in this case the lang must be provided\n      * - {\"word1\": {\"en\": \"translated en word1\", \"de\": \"translated de word1\"}, \"word2\": {\"en\": \"translated en word2\", \"de\": \"translated de word2\"}}, but no lang must be provided\n      * @param {object} words additional words for specific language\n      * @param {ioBroker.Languages} lang\n      */\n     static extendTranslations(words, lang) {\n         try {\n             if (!lang) {\n                 Object.keys(words).forEach(word => {\n                     Object.keys(words[word]).forEach(lang => {\n                         if (!I18n.translations[lang]) {\n                             console.warn(`Used unknown language: ${lang}`);\n                         }\n                         if (!I18n.translations[lang][word]) {\n                             I18n.translations[lang][word] = words[word][lang];\n                         } else if (I18n.translations[lang][word] !== words[word][lang]) {\n                             console.warn(`Translation for word \"${word}\" in \"${lang}\" was ignored: existing = \"${I18n.translations[lang][word]}\", new = ${words[word][lang]}`);\n                         }\n                     });\n                 });\n             } else {\n                 if (!I18n.translations[lang]) {\n                     console.warn(`Used unknown language: ${lang}`);\n                 }\n                 I18n.translations[lang] = I18n.translations[lang] || {};\n                 Object.keys(words)\n                     .forEach(word => {\n                         if (!I18n.translations[lang][word]) {\n                             I18n.translations[lang][word] = words[word];\n                         } else if (I18n.translations[lang][word] !== words[word]) {\n                             console.warn(`Translation for word \"${word}\" in \"${lang}\" was ignored: existing = \"${I18n.translations[lang][word]}\", new = ${words[word]}`);\n                         }\n                     });\n             }\n         } catch (e) {\n             console.error(`Cannot apply translations: ${e}`);\n         }\n    }\n\n    /**\n     * Sets all translations (in all languages).\n     * @param {{ [lang in ioBroker.Languages]?: Record<string, string>; }} translations\n     */\n    static setTranslations(translations) {\n        if (translations) {\n            I18n.translations = translations;\n        }\n    }\n\n    /**\n     * Get the currently chosen language.\n     * @returns {ioBroker.Languages} The current language.\n     */\n    static getLanguage() {\n        return I18n.lang;\n    }\n\n    /**\n     * Translate the given string to the selected language.\n     * @param {string} word The (key) word to look up the string.\n     * @param {string[]} args Optional arguments which will replace the first (second, third, ...) occurence of %s\n     */\n    static t(word, ...args) {\n        const translation = I18n.translations[I18n.lang];\n        if (translation) {\n            const w = translation[word];\n            if (w) {\n                word = w;\n            } else {\n                console.log(`Translate: ${word}`);\n            }\n        }\n        for (const arg of args) {\n            word = word.replace('%s', arg);\n        }\n        return word;\n    }\n}\n\n/*I18n.translations = {\n    'en': require('./i18n/en'),\n    'ru': require('./i18n/ru'),\n    'de': require('./i18n/de'),\n};\nI18n.fallbacks = true;\nI18n.t = function () {};*/\n\nexport default I18n;"],"file":"i18n.js"}},"error":null,"hash":"aaaed520916edc50c5d84ee2b7d7f75d","cacheData":{"env":{}}}